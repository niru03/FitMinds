# -*- coding: utf-8 -*-
"""FitMinds.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rbTFP3INSbw89CqAlMAHs3ohyMLJJ--G
"""

# Install OpenAI library
!pip install openai gradio

!pip install --upgrade openai

!pip show openai

!pip install streamlit

!pip install streamlit pyngrok

import streamlit as st
import openai
from textblob import TextBlob
import pandas as pd

# Set your OpenAI API key
openai.api_key = "sk-proj-your open ai api key
"

# --- GPT Response Generator ---
def generate_gpt_response(user_input):
    """
    Generates a chatbot response using OpenAI's GPT-3.5 Turbo model.
    """
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are FitMinds, a friendly AI mental health assistant designed to support university students with wellness guidance."},
                {"role": "user", "content": user_input}
            ]
        )
        return response['choices'][0]['message']['content'].strip()
    except openai.error.RateLimitError:
        return "We're experiencing high usage at the moment. Please try again later."

# --- Sentiment Analysis ---
def analyze_user_sentiment(text):
    """
    Analyzes the user's input sentiment and returns sentiment type and polarity score.
    """
    sentiment_analysis = TextBlob(text)
    polarity = sentiment_analysis.sentiment.polarity
    if polarity > 0.5:
        return "Very Positive", polarity
    elif 0.1 < polarity <= 0.5:
        return "Positive", polarity
    elif -0.1 <= polarity <= 0.1:
        return "Neutral", polarity
    elif -0.5 < polarity < -0.1:
        return "Negative", polarity
    else:
        return "Very Negative", polarity

# --- Wellness Suggestions ---
def suggest_coping_strategy(sentiment):
    """
    Provides a wellness suggestion based on the user's sentiment.
    """
    suggestions = {
        "Very Positive": "Fantastic! Keep the good energy going by sharing your happiness or practicing gratitude.",
        "Positive": "You're doing great! Try reflecting on what made you feel positive today to keep the momentum.",
        "Neutral": "Itâ€™s okay to feel neutral. Maybe take a break or engage in an activity that sparks joy.",
        "Negative": "It seems you're feeling low. Consider some calming exercises, journaling, or reaching out to someone you trust.",
        "Very Negative": "Sorry to hear you're feeling down. Remember, you're not alone. Try to seek support from a trusted friend or professional."
    }
    return suggestions.get(sentiment, "You're doing greatâ€”keep going!")

# --- Sidebar Components ---
def display_sidebar():
    """
    Displays the sidebar with resources, a privacy disclaimer, and session summary options.
    """
    st.sidebar.title("FitMinds Resources")
    st.sidebar.write("If you or someone you know needs immediate help, contact:")
    st.sidebar.markdown("""
    - **National Suicide Prevention Lifeline**: 1-800-273-8255
    - **Crisis Text Line**: Text "HELLO" to 741741
    - [More Resources](https://www.mentalhealth.gov/get-help/immediate-help)
    """)

    # Privacy disclaimer
    st.sidebar.markdown("---")
    st.sidebar.subheader("Privacy Notice")
    st.sidebar.info("This app temporarily stores your chat and mood data during your session. No permanent storage is used.")

# --- Main Application ---
def main():
    """
    Main function to handle the chatbot interface, user input, sentiment analysis, and mood tracking.
    """
    st.title("ðŸŒŸ FitMinds: Your AI Mental Health Companion ðŸŒŸ")
    st.write("A safe, supportive space to talk, reflect, and receive personalized wellness tips.")

    # Session state for chat history and mood tracker
    if "chat_history" not in st.session_state:
        st.session_state["chat_history"] = []
    if "mood_data" not in st.session_state:
        st.session_state["mood_data"] = []

    # User input form
    with st.form(key="chat_form"):
        user_message = st.text_input("How are you feeling today?", placeholder="Type your thoughts or emotions here...")
        submit = st.form_submit_button(label="Send")

    if submit and user_message:
        # Append user message to chat history
        st.session_state["chat_history"].append(("User", user_message))

        # Analyze sentiment and generate wellness suggestion
        sentiment, polarity = analyze_user_sentiment(user_message)
        suggestion = suggest_coping_strategy(sentiment)

        # Get GPT-generated response
        bot_response = generate_gpt_response(user_message)
        st.session_state["chat_history"].append(("FitMinds", bot_response))

        # Track sentiment for mood data
        st.session_state["mood_data"].append({"Message": user_message, "Sentiment": sentiment, "Polarity": polarity})

        # Display wellness suggestion
        st.success(f"**Wellness Tip:** {suggestion}")

    # Display chat history
    st.subheader("Chat History")
    for sender, message in st.session_state["chat_history"]:
        if sender == "User":
            st.markdown(f"**You:** {message}")
        else:
            st.markdown(f"**FitMinds:** {message}")

    # Mood tracking visualization
    if st.session_state["mood_data"]:
        st.subheader("Mood Tracker")
        mood_df = pd.DataFrame(st.session_state["mood_data"])
        st.line_chart(mood_df["Polarity"])

# Run the app
if __name__ == "__main__":
    display_sidebar()
    main()

!pip install streamlit pyngrok

import streamlit as st

# App title and description
st.title("FitMinds: AI-Driven Mental Health App")
st.subheader("Welcome to FitMinds!")
st.write("This app provides mental health support for university students.")

# Input form
st.write("How are you feeling today?")
user_input = st.text_input("Share your thoughts or feelings:")

# Example response
if user_input:
    st.write(f"You entered: {user_input}")
    st.success("Stay positive! Here's a tip: Practice gratitude or take a short mindfulness break.")

